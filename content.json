{"meta":{"title":"H-Change的个人博客","subtitle":null,"description":null,"author":"H-Change","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"CSS*position属性辨析","slug":"CSS-position属性辨析","date":"2019-03-15T13:24:55.000Z","updated":"2019-03-15T14:33:15.484Z","comments":true,"path":"2019/03/15/CSS-position属性辨析/","link":"","permalink":"http://yoursite.com/2019/03/15/CSS-position属性辨析/","excerpt":"position属性规定元素的定位类型。","text":"position属性规定元素的定位类型。 ​ 这个属性定义建立元素布局所用的定位机制。任何元素都可以定位，不过绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型。相对定位元素会相对于它在正常流中的默认位置偏移。 值 描述说明 absolute 生成“绝对”定位的元素，生成的元素相对于static定位以外的第一个父元素（最近的祖先）进行定位，如果不存在满足条件的祖先，则相对body定位。该元素脱离页面中的普通流并改变Display的属性。 fixed 生成固定定位的元素，相对于浏览器窗口进行定位。 relative 生成相对定位元素，相对于原来位置（原来位置指在文档流中默认的位置，若加上了浮动时，那么这个原来位置就是你设定浮动时的位置）的偏移，原来位置依然占据空间。 static 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明 ）。 absolute值图解：","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://yoursite.com/tags/CSS/"}]},{"title":"微信小程序AppID","slug":"微信小程序AppID","date":"2019-02-11T01:51:38.000Z","updated":"2019-02-11T02:06:19.743Z","comments":true,"path":"2019/02/11/微信小程序AppID/","link":"","permalink":"http://yoursite.com/2019/02/11/微信小程序AppID/","excerpt":"​ 微信小程序AppID，开发过程中使用。相对开发者而言，如果没有AppID则无法进行开发。","text":"​ 微信小程序AppID，开发过程中使用。相对开发者而言，如果没有AppID则无法进行开发。 1.第一步：进入微信公众平台，登陆或注册自己的账号。 2.第二步：进入之后在左边目录栏中寻找开发，点击进入，之后点击开发设置，即找到AppID。 ​","categories":[],"tags":[{"name":"微信小程序开发，AppID","slug":"微信小程序开发，AppID","permalink":"http://yoursite.com/tags/微信小程序开发，AppID/"}]},{"title":"git远程仓库管理","slug":"git的使用-1","date":"2019-02-09T12:07:12.000Z","updated":"2019-03-20T05:14:27.509Z","comments":true,"path":"2019/02/09/git的使用-1/","link":"","permalink":"http://yoursite.com/2019/02/09/git的使用-1/","excerpt":"Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 学习如何使用git来管理GitHub的仓库","text":"Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 学习如何使用git来管理GitHub的仓库 想要在本地管理远程仓库，第一步要做的就是把GitHub仓库拉取到本地，之后才能在本地对仓库进行操作管理。下面简述具体过程： 1使用git clone https://github.com/litten/hexo-theme-yilia.git ，将仓库hexo-theme-yilia克隆到本地磁盘 2.首先我们进入我们克隆下的仓库（仓库中含有.git文件用来存储历史信息和配置信息），使用git status指令查看仓库状态（包括哪些文件更新了，哪些是新添的，哪些是被删除了等等），如图显示·nothing to commit,working tree clean· ,没有文件等待被提交，工作树是空的，表示一切正常 3.因为我们要把克隆下来的仓库上传到自己的github库中，所以我们这里需要连接远程库（这是一个在GitHub上新建的空库），一个项目可能有多个远程Repositories,为了区分不同的远程库，我们就要给他们起不同发的名字，注意这里theme1是我们给远程repository起的名字。名字不能重复（同一个名字不能给多个远程库使用） 1549711084713.png 第二张图是报错的情况，显示origin已经存在（origin是之前我创建的一个远程库名） 4.连接成功以后，就可以上传了，git push theme1 master指令（这条指令有两个参数，一个是远程Repo的名称【这里为theme1】；第二个是分支push【master是每个Repo的默认分支】），特别注意：这里的git push还会要求你输入你的github的用户名和密码才能运行 之后等待上传完成即可","categories":[],"tags":[{"name":"git,github，远程仓库管理","slug":"git-github，远程仓库管理","permalink":"http://yoursite.com/tags/git-github，远程仓库管理/"}]},{"title":"The study of hex and git","slug":"git和hexo常用命令集","date":"2019-01-31T12:05:35.359Z","updated":"2019-03-20T05:18:15.970Z","comments":true,"path":"2019/01/31/git和hexo常用命令集/","link":"","permalink":"http://yoursite.com/2019/01/31/git和hexo常用命令集/","excerpt":"一些常用git/hexo命令总结。","text":"一些常用git/hexo命令总结。 git 用于上传和下载repository上的文件： 12345678910111213141516171819202122232425touch hello.txt----创建一个文件，用于git init定义一个.git文件，从而来存储克隆下来的ropegit status----查看Repo的状态git add hello.txt----git add选择那些文件是需要提交的，这些被选择的作业就进入stage状态，等待最后被git commitgit reset----取消stage状态git commit -m &apos;注释&apos;----提交git commit --amend----修改之前的commit叙述git reset HEAD^ --soft----取消commit,但保留修改的文件或项目git reset HEAD^ --hard----回到上一次commit干净的状态git remote add origin htts://----一个项目可能有多个远程Resipoditor，为了区分不同的远程repositories，我们就要给他们其不同的名字，这里的origin，就是这个分支的名字git push origin master----这里git push还会要求输入你GitHub的用户和密码，其有两个参数①远程仓库的origin名称②分支git clone http://----克隆他人Repo，将其在本地创建git pull----跟新获取git commit -m&apos;注释&apos;/git push/git pull hexo 可以用于： 12345678910111213hexo deploy----部署到Githubhexo new----新建文章hexo new page----新建页面hexo generate----生成静态页面至public目录hexo server----开启预览访问端口（默认端口是4000）hexo help----查看帮助hexo version----查看hexo的版本","categories":[],"tags":[{"name":"hexo,git，指令总结","slug":"hexo-git，指令总结","permalink":"http://yoursite.com/tags/hexo-git，指令总结/"}]}]}